from typing import Dict, Set, Any


class TreeComparator:
    @staticmethod
    def compare(result: Dict[str, Any], reference: Dict[str, Any]) -> bool:
        """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–µ—Ä–µ–≤–æ —Å–µ—Ç–∏ —Å —ç—Ç–∞–ª–æ–Ω–Ω—ã–º."""
        print("=== –°–†–ê–í–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ===")
        
        roots_match = set(result['roots']) == set(reference['roots'])
        print(f"‚úì –ö–æ—Ä–Ω–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç: {roots_match}")
        
        nodes_match = len(result['nodes']) == len(reference['nodes'])
        print(f"‚úì –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤: {nodes_match} ({len(result['nodes'])}/{len(reference['nodes'])})")
        
        tree_matches = 0
        tree_total = len(reference['tree'])
        
        for node_id, node_data in reference['tree'].items():
            expected = set(node_data['child'])
            actual = set(result['tree'].get(node_id, {}).get('child', []))
            if expected == actual:
                tree_matches += 1
            else:
                print(f"‚úó {node_id}: –æ–∂–∏–¥–∞–µ—Ç—Å—è {sorted(expected)}, –ø–æ–ª—É—á–µ–Ω–æ {sorted(actual)}")
        
        tree_structure_match = tree_matches == tree_total
        print(f"‚úì –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–µ—Ä–µ–≤–∞: {tree_matches}/{tree_total} —É–∑–ª–æ–≤ —Å–æ–≤–ø–∞–¥–∞–µ—Ç")
        overall_match = roots_match and nodes_match and tree_structure_match
        print(f"\n{'üéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù' if overall_match else 'üîß –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê'}")
        return overall_match